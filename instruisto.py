from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import hspoiler
import json
from config import TOKEN_API
from keyboards import *

HELP_COMMAND = """–ü—Ä–∏–≤–µ—Ç, —ç—Å–ø–µ—Ä–∞–Ω—Ç–∏—Å—Ç! –Ø –±–æ—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ <strong>–≠—Å–ø–µ—Ä–∞–Ω—Ç–æ</strong>. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —è–∑—ã–∫, —Ä–∞—Å—Å–∫–∞–∂—É –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ–± –≠—Å–ø–µ—Ä–∞–Ω—Ç–æ. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –º–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ:

<strong>/help</strong> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<strong>/start</strong> - <em>–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</em>
<strong>/contact</strong> - <em>—Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º</em>
<strong>/links</strong> - <em>–ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</em>"""

bot = Bot(TOKEN_API, parse_mode='HTML')
dp = Dispatcher(bot)

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ –ª–∏—á–Ω—ã–π –∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤

with open('list_of_unstudied.json') as file_of_unstudied:
    list_of_unstudied = json.load(file_of_unstudied)
    print(list_of_unstudied)


def add_to_studied_words(new_word):
    with open('list_of_studied_words.json', 'a', encoding='utf=8') as file_of_studied:
        json.dump(new_word, file_of_studied, ensure_ascii=False)

def delete_word_from_unstudied():
    with open('list_of_unstudied.json', 'w', encoding='utf-8') as file_of_unstudied:
        json.dump(list_of_unstudied, file_of_unstudied, ensure_ascii=False)


@dp.message_handler(commands=['start', 'help'])
async def start_command(message: types.Message):
    await message.answer(text=HELP_COMMAND,  reply_markup=kb)


@dp.message_handler(commands=['contact'])
async def contact_command(message: types.Message):
    await message.answer(text='–ü–∏—à–∏ –º–Ω–µ –ø—Ä–æ –±–∞–≥–∏ –∏ —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ü•≥',
                         reply_markup=ikb)


@dp.message_handler(commands=['links'])
async def get_useful_links_command(message: types.Message):
    await message.answer(text='–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                         reply_markup=ikb_links)


@dp.message_handler(commands='training')
async def get_one_word(message: types.Message):
    new_word = list_of_unstudied.pop(0)
    add_to_studied_words(new_word)
    list_of_keys = list(new_word)
    await message.answer(text=f'–ö–∞–∫ –±—É–¥–µ—Ç <strong>"{list_of_keys[0]}"</strong> –Ω–∞ –≠—Å–ø–µ—Ä–∞–Ω—Ç–æ?\n\
–û—Ç–≤–µ—Ç: <b>{hspoiler(new_word[list_of_keys[0]])}</b>\n\
–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n <em>{hspoiler(new_word[list_of_keys[1]])}</em>', reply_markup=ikb_guess)
    delete_word_from_unstudied()



@dp.callback_query_handler()
async def forgot_word(callback: types.CallbackQuery):
    if callback.data == 'remember':
        await callback.answer('–∫—Ä–∞—Å–∞–≤—á–∏–∫')
    elif callback.data == 'forget':
        await callback.answer('–Ω—É –∏ –ª–æ—Ö')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
